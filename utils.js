const archiver = require('archiver');
const fs = require('fs');

function progressBar(progress) {
    const barLength = 50;
    const filledLength = Math.round(barLength * progress);
    const emptyLength = barLength - filledLength;
    const progressBar = '█'.repeat(filledLength) + '░'.repeat(emptyLength);
    return `[${progressBar}] ${Math.round(progress * 100)}%`;  
}

// The zipFolder function has been generated by GPT 3.5
function zipFolder(sourceFolder, targetZip) {
    return new Promise((resolve, reject) => {
        const output = fs.createWriteStream(targetZip);
        const archive = archiver('zip', {
            zlib: { level: 9 } 
        });
        archive.pipe(output);
        archive.directory(sourceFolder, false);
        archive.finalize();
        output.on('close', () => {
            console.log(`Folder "${sourceFolder}" has been zipped to "${targetZip}"`);
            resolve();
        });
        archive.on('error', (err) => {
            reject(`Error zipping folder: ${err}`);
        });
    });
}

function removeHTML(content){
    return content.replace(/<\/?[^>]+(>|$)/g,'');
}

async function findImages(title, index, content, db){
    if(!fs.existsSync(`${auditName}/${title}`)){
        fs.mkdirSync(`${auditName}/${title}`);
    }
    const imgRegex = /<img.*?src=['"](.*?)['"].*?alt=['"](.*?)['"].*?>/g;
    let match;
    const imgcollection = db.collection('images');
    let count = 1;
    while((match = imgRegex.exec(content)) !== null){
        let document = await imgcollection.findOne({_id:new ObjectId(match[1])});
        content = content.replace(match[0], ` (Proof_${count} - ${match[2]}) `);
        const imageData = document.value.split(';base64,').pop();
        const extension = document.value.substring(document.value.indexOf('/') + 1, document.value.indexOf(';'));
        fs.writeFile(`${auditName}/${title}/Proof_${count}.${extension}`,imageData,{encoding:'base64'},(err) => {});
        count++;
    }
    return removeHTML(content);
}

module.exports = {progressBar, zipFolder, findImages}